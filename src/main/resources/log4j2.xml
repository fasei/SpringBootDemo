<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="WARN" monitorInterval="30">
    <!--全局属性-->
    <Properties>
        <Property name="APP_NAME">demo</Property>
        <Property name="LOG_FILE_PATH">D:/logs/${APP_NAME}</Property>
        <Property name="PATTERN_FORMAT">[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%class{36}] [%L] [%M] - %msg%xEx%n
        </Property>
    </Properties>

    <Appenders>
        <!--输出到控制台-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${PATTERN_FORMAT}"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${LOG_FILE_PATH}/all.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--输出到文件 用来定义超过指定大小自动删除旧的创建新的的Appender.-->
        <RollingFile name="RollingInfoFile" fileName="${LOG_FILE_PATH}/info.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/info-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
                <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->

            </Policies>
            <DefaultRolloverStrategy max="2000"/>
        </RollingFile>

        <!--输出警告日志到文件-->
        <RollingFile name="RollingWarnFile" fileName="${LOG_FILE_PATH}/warn.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/warn-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
                <!--文件最多100个 -->

            </Policies>
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

        <!--输出错误日志到文件-->
        <RollingFile name="RollingErrorFile" fileName="${LOG_FILE_PATH}/error.log"
                     filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/error-%d{yyyyMMdd}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>

            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
                <OnStartupTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
                <TimeBasedTriggeringPolicy/>
            </Policies>
        </RollingFile>

        <!-- ************************** -->
        <!--按照天数的日志 -->
        <!-- ************************** -->

        <RollingFile name="PLATFORM_ROLLING_FILE" fileName="${LOG_FILE_PATH}/platform/platform.log"
                     ignoreExceptions="false"
                     filePattern="${LOG_FILE_PATH}/platform/$${date:yyyyMM}/platform-%d{yyyyMMdd}-%i.log.gz">
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <OnStartupTriggeringPolicy/>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>

            </Policies>
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

        <RollingFile name="BUSSINESS_ROLLING_FILE" fileName="${LOG_FILE_PATH}/bussiness/bussiness.log"
                     ignoreExceptions="false"
                     filePattern="${LOG_FILE_PATH}/bussiness/$${date:yyyyMM}/bussiness-%d{yyyyMMdd}-%i.log.gz">
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <OnStartupTriggeringPolicy/>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>

            </Policies>
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

        <RollingFile name="EXCEPTION_ROLLING_FILE" fileName="${LOG_FILE_PATH}/exception/exception.log"
                     ignoreExceptions="false"
                     filePattern="${LOG_FILE_PATH}/exception/$${date:yyyyMM}/exception-%d{yyyyMMdd}-%i.log.gz">
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <OnStartupTriggeringPolicy/>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

        <RollingFile name="DB_ROLLING_FILE" fileName="${LOG_FILE_PATH}/db/db.log"
                     ignoreExceptions="false"
                     filePattern="${LOG_FILE_PATH}/db/$${date:yyyyMM}/db-%d{yyyyMMdd}-%i.log.gz">
            <PatternLayout>
                <pattern>${PATTERN_FORMAT}</pattern>
            </PatternLayout>

            <Policies>
                <OnStartupTriggeringPolicy/>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>

            </Policies>
            <!--DefaultRolloverStrategy属性需要放在RollingFile目录，如果放到Policies目录，是错误的-->
            <DefaultRolloverStrategy max="100"/>
        </RollingFile>

    </Appenders>

    <Loggers>
        <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--
        <Logger name="org.springframework" level="INFO" additivity="false"/>
        <Logger name="org.mybatis" level="INFO" additivity="false"/>
        -->
        <!--过滤无用信息  -->
        <Logger name="com.zaxxer.hikari" level="INFO" additivity="false"/>
        <Logger name="org.springframework" level="INFO" additivity="false"/>
        <Logger name="org.mybatis" level="INFO" additivity="false"/>
        <Logger name="springfox.documentation" level="INFO" additivity="false"/>
        <Logger name="org.apache.juli" level="INFO" additivity="false"/>
        <Logger name="org.hibernate.validator" level="INFO" additivity="false"/>

        <Logger name="platform" level="INFO" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="PLATFORM_ROLLING_FILE"/>
        </Logger>
        <Logger name="bussiness" level="INFO" additivity="false">
            <AppenderRef ref="BUSSINESS_ROLLING_FILE"/>
        </Logger>

        <Logger name="exception" level="INFO" additivity="false">
            <AppenderRef ref="EXCEPTION_ROLLING_FILE"/>
        </Logger>
        <Logger name="db" level="INFO" additivity="false">
            <AppenderRef ref="DB_ROLLING_FILE"/>
        </Logger>


        <!-- LOG everything at INFO level -->
        <!--建立一个默认的root的logger

        我们这里看到了配置文件里面是name很重要，没错，这个name可不能随便起（其实可以随便起）。
        这个机制意思很简单。就是类似于java package一样，比如我们的一个包：cn.lsw.base.log4j2。
        而且，可以发现我们前面生成Logger对象的时候，命名都是通过 Hello.class.getName(); 这样的方法，为什么要这样呢？
         很简单，因为有所谓的Logger 继承的问题。比如 如果你给cn.lsw.base定义了一个logger，
         那么他也适用于cn.lsw.base.lgo4j2这个logger。名称的继承是通过点（.）分隔的
         。然后你可以猜测上面loggers里面有一个子节点不是logger而是root，而且这个root没有name属性。
         这个root相当于根节点。你所有的logger都适用与这个logger，所以，即使你在很多类里面通过类名.class.getName()
         得到很多的logger，
        而且没有在配置文件的loggers下面做配置，他们也都能够输出，因为他们都继承了root的log配置。

        那有人就要问了，他不是也应该继承了root的配置了么，那么会不会输出两遍呢？
        我们在配置文件中给了解释，如果你设置了additivity="false"，就不会输出两遍。
        -->

        <Root level="ALL">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="log"/>
            <AppenderRef ref="RollingInfoFile"/>
            <AppenderRef ref="RollingWarnFile"/>
            <AppenderRef ref="RollingErrorFile"/>
        </Root>
    </Loggers>

</Configuration>
